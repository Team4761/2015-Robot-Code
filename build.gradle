buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.hidetake:gradle-ssh-plugin:1.1.2"
	}
}

apply plugin: "org.hidetake.ssh"

apply plugin: "eclipse"
apply plugin: "java"

task wrapper(type: Wrapper) {
	gradleVersion = "1.5"
}

// Team information
int teamNumber = 4761

// Project specific info
String projectPackage = "org.usfirst.frc.team4761.robot"
String robotClass = projectPackage + ".Robot"
String simulationWorldFile = "/usr/share/frcsim/worlds/GearsBotDemo.world"

// Deployment information
String username = "lvuser"
String password = ""
String deployDir = "/home/lvuser"
String deployKillCommand= ". /etc/profile.d/natinst-path.sh; /usr/local/frc/bin/frcKillRobot.sh -t -r"
String debugFlagDir = "/tmp/"
String debugFlagCommand = "chown lvuser:ni " + debugFlagDir + "frcdebug"
String commandDir = "/home/lvuser/"
String version = "current"
String roboRioJreDir = "/usr/local/frc/JRE"

// Libraries to use
String wpilib = System.getProperty("user.home") + "/wpilib/java/" + version
String wpilibLib = wpilib + "/lib"
String wpilibJar = wpilibLib + "/WPILib.jar"
String wpilibSources = wpilibLib + "/WPILib-sources.jar"
String networkTablesJar = wpilibLib + "/NetworkTables.jar"
String networkTablesSources = wpilibLib + "/NetworkTables-sources.jar"
// String jnaJar = wpilibLib + "/jna-4.0.0.jar"
// String jnaeratorJar = wpilibLib + "/jnaerator-runtime.jar"
// String classpath = wpilibJar + ":" + networkTablesJar + ":" + jnaJar + ":" + jnaeratorJar
String classpath = wpilibJar + ":" + networkTablesJar
int roboRioAllowedImages = 23

// Ant support
String wpilibAntDir = wpilib + "/ant"
String jschJar = wpilibAntDir + "/jsch-0.1.50.jar"
String classLoaderTaskJar = wpilibAntDir + "/ant-classloadertask.jar"

// Build information
String releaseJar = "FRCUserProgram.jar"
String srcDir = "src"
String buildDir = "frc-build" // Just 'build' would conflict with Gradle
String buildJars = buildDir + "/jars"
String distDir = "frc-dist" // Staying consistent with buildDir
String distJar = distDir + "/" + releaseJar

// Simulation Information
String simulationDistJar = distDir + "/FRCUserProgramSim.jar"
String wpilibSim = wpilib + "/sim"
String wpilibSimLib = wpilibSim + "/lib"
String wpilibSimTools = wpilibSim + "/tools"

task prepareJarEnvironment(type: Copy) {
	from wpilibLib
	destinationDir = file(buildJars)
	include "**/*.jar"
	exclude "**/*-sources.jar"
}

jar {
	dependsOn(prepareJarEnvironment)

	archiveName = releaseJar
	destinationDir = file(distDir)
	manifest {
		mainAttributes(
			"Main-Class": "edu.wpi.first.wpilibj.RobotBase",
			"Robot-Class": robotClass,
			"Class-Path": "."
		)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.2'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.2'
	compile fileTree(dir: wpilibLib, include: "WPILib.jar")
	compile fileTree(dir: wpilibLib, include: "NetworkTables.jar")
}

def locationIsReachable = {
	String hostname ->
	ant.condition(property: "locationisreachable")  {
		isreachable(host: hostname, timeout: 5)
	}
	ant.properties.locationisreachable
}

String target

task getTargetIp << {
	target = "roboRIO-" + teamNumber + ".local"
	println "Trying Target: " + target
	if(locationIsReachable(target)) {
		println "roboRIO found via mDNS"
	}
	else {
		println "roboRIO not found via mDNS, falling back to static USB"
		target = "172.22.11.2"
		if(locationIsReachable(target)) {
			println "roboRIO found via static USB"
		}
		else {
			int ipUpper = teamNumber / 100
			int ipLower = teamNumber % 100
			target = "10." + ipUpper + "." + ipLower + ".2"
			println "roboRIO not found via USB, falling back to static address of " + target
			if(locationIsReachable(target)) {
				println "roboRIO found via Ethernet static"
			}
			else {
				throw new GradleException("roboRIO not found, please check that the roboRIO is connected, imaged and that the team number is set properly in Eclipse")
			}
		}
	}
}

remotes {
	roboRio {
		host = target
		user = username
		password = password
	}
	roboRioAdmin {
		host = target
		user = "admin"
		password = password
	}
}

task deploy(dependsOn: [jar, getTargetIp]) << {
	println "Copying code over"
	ssh.run {
		session(remotes.roboRio) {
			put from: distJar, into: deployDir
			execute "killall netconsole-host"
			put from: wpilibAntDir + "/robotCommand", into: commandDir
		}
		session(remotes.roboRioAdmin) {
			put from: wpilibAntDir + "/netconsole-host", into: "/usr/local/frc/bin"
		}
	}
}

task run(dependsOn: deploy) << {
	println "Starting program"
	ssh.run {
		session(remotes.roboRio) {
			execute deployKillCommand
		}
	}
}
